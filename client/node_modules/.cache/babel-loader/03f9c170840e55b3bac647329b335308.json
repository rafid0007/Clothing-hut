{"ast":null,"code":"import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\n\nfunction createLogger() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var loggerOptions = Object.assign({}, defaults, options);\n  var logger = loggerOptions.logger,\n      stateTransformer = loggerOptions.stateTransformer,\n      errorTransformer = loggerOptions.errorTransformer,\n      predicate = loggerOptions.predicate,\n      logErrors = loggerOptions.logErrors,\n      diffPredicate = loggerOptions.diffPredicate; // Return if 'console' object is not defined\n\n  if (typeof logger === 'undefined') {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  } // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n\n\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(\"[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\\n// Logger with default options\\nimport { logger } from 'redux-logger'\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\\nimport createLogger from 'redux-logger'\\nconst logger = createLogger({\\n  // ...options\\n});\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n\");\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n\n  var logBuffer = [];\n  return function (_ref) {\n    var getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        // Exit early if predicate function returns 'false'\n        if (typeof predicate === 'function' && !predicate(getState, action)) {\n          return next(action);\n        }\n\n        var logEntry = {};\n        logBuffer.push(logEntry);\n        logEntry.started = timer.now();\n        logEntry.startedTime = new Date();\n        logEntry.prevState = stateTransformer(getState());\n        logEntry.action = action;\n        var returnedValue;\n\n        if (logErrors) {\n          try {\n            returnedValue = next(action);\n          } catch (e) {\n            logEntry.error = errorTransformer(e);\n          }\n        } else {\n          returnedValue = next(action);\n        }\n\n        logEntry.took = timer.now() - logEntry.started;\n        logEntry.nextState = stateTransformer(getState());\n        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;\n        printBuffer(logBuffer, Object.assign({}, loggerOptions, {\n          diff: diff\n        }));\n        logBuffer.length = 0;\n        if (logEntry.error) throw logEntry.error;\n        return returnedValue;\n      };\n    };\n  };\n} // eslint-disable-next-line consistent-return\n\n\nvar defaultLogger = function defaultLogger() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      dispatch = _ref2.dispatch,\n      getState = _ref2.getState;\n\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({\n      dispatch: dispatch,\n      getState: getState\n    });\n  } // eslint-disable-next-line no-console\n\n\n  console.error(\"\\n[redux-logger v3] BREAKING CHANGE\\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\\n[redux-logger v3] Change\\n[redux-logger v3] import createLogger from 'redux-logger'\\n[redux-logger v3] to\\n[redux-logger v3] import { createLogger } from 'redux-logger'\\n\");\n};\n\nexport { defaults, createLogger, defaultLogger as logger };\nexport default defaultLogger;","map":{"version":3,"sources":["E:/react-commerce/client/node_modules/redux-logger/src/index.js"],"names":["printBuffer","timer","defaults","createLogger","options","loggerOptions","Object","assign","logger","stateTransformer","errorTransformer","predicate","logErrors","diffPredicate","next","action","getState","dispatch","console","error","logBuffer","logEntry","push","started","now","startedTime","Date","prevState","returnedValue","e","took","nextState","diff","length","defaultLogger"],"mappings":"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","sourcesContent":["import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\nfunction createLogger(options = {}) {\n  const loggerOptions = Object.assign({}, defaults, options);\n\n  const {\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate,\n  } = loggerOptions;\n\n  // Return if 'console' object is not defined\n  if (typeof logger === 'undefined') {\n    return () => next => action => next(action);\n  }\n\n  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(`[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n`);\n\n    return () => next => action => next(action);\n  }\n\n  const logBuffer = [];\n\n  return ({ getState }) => next => (action) => {\n    // Exit early if predicate function returns 'false'\n    if (typeof predicate === 'function' && !predicate(getState, action)) {\n      return next(action);\n    }\n\n    const logEntry = {};\n\n    logBuffer.push(logEntry);\n\n    logEntry.started = timer.now();\n    logEntry.startedTime = new Date();\n    logEntry.prevState = stateTransformer(getState());\n    logEntry.action = action;\n\n    let returnedValue;\n    if (logErrors) {\n      try {\n        returnedValue = next(action);\n      } catch (e) {\n        logEntry.error = errorTransformer(e);\n      }\n    } else {\n      returnedValue = next(action);\n    }\n\n    logEntry.took = timer.now() - logEntry.started;\n    logEntry.nextState = stateTransformer(getState());\n\n    const diff = loggerOptions.diff && typeof diffPredicate === 'function'\n      ? diffPredicate(getState, action)\n      : loggerOptions.diff;\n\n    printBuffer(logBuffer, Object.assign({}, loggerOptions, { diff }));\n    logBuffer.length = 0;\n\n    if (logEntry.error) throw logEntry.error;\n    return returnedValue;\n  };\n}\n\n// eslint-disable-next-line consistent-return\nconst defaultLogger = ({ dispatch, getState } = {}) => {\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({ dispatch, getState });\n  }\n  // eslint-disable-next-line no-console\n  console.error(`\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n`);\n};\n\nexport { defaults, createLogger, defaultLogger as logger };\n\nexport default defaultLogger;\n"]},"metadata":{},"sourceType":"module"}