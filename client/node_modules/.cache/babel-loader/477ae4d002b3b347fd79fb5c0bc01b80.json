{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-commerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.comp\";\nimport CollectionPage from \"../collection/collection.comp\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { selectIsFetching } from \"../../redux/shop/shop.selectors\";\nimport './shop.styles.scss'; // import * as PropTypes from \"prop-types\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // unsubscribeFromSnapShot = null;\n  componentDidMount() {\n    fetchCollectionsStartAsync(); // const {updateCollections} = this.props;\n    // const collectionRef = firestore.collection('collections');\n    //\n    // collectionRef.get().then(response =>{\n    //     const collectionMap = convertCollectionsSnapShotToMap(response);\n    //     updateCollections(collectionMap);\n    //     this.setState({loading: false});\n    // })\n    // this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapShot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({loading: false});\n    // });\n  } // componentWillUnmount() {\n  //     this.unsubscribeFromSnapShot();\n  // }\n\n\n  render() {\n    let {\n      match\n    } = this.props;\n    let {\n      isFetching\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // ShopPage.propTypes = {match: PropTypes.any};\n\n\nconst mapDispatchToProps = dispatch => ({});\n\nconst mapStateToProps = createStructuredSelector({\n  isFetching: selectIsFetching\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["E:/react-commerce/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","CollectionsOverview","CollectionPage","fetchCollectionsStartAsync","WithSpinner","selectIsFetching","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","render","match","props","isFetching","path","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AAEA,OAAOC,mBAAP,MAAgC,iEAAhC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAAQC,0BAAR,QAAyC,+BAAzC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;AAEA,OAAO,oBAAP,C,CACA;;AAEA,MAAMC,8BAA8B,GAAGF,WAAW,CAACH,mBAAD,CAAlD;AACA,MAAMM,yBAAyB,GAAGH,WAAW,CAACF,cAAD,CAA7C;;AAEA,MAAMM,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAEnC;AAEAC,EAAAA,iBAAiB,GAAG;AACjBP,IAAAA,0BAA0B,GADT,CAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACH,GAtBkC,CAwBnC;AACA;AACA;;;AAEAQ,EAAAA,MAAM,GAAG;AACL,QAAI;AAACC,MAAAA;AAAD,QAAU,KAAKC,KAAnB;AACA,QAAI;AAACC,MAAAA;AAAD,QAAe,KAAKD,KAAxB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAED,KAAK,CAACG,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGF,KAAK,iBAC9C,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEC;AAA3C,SAA2DD,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAED,KAAK,CAACG,IAAK,gBAAjC;AAAkD,MAAA,MAAM,EAAEF,KAAK,iBAC/D,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEC;AAAtC,SAAsDD,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAQH;;AAvCkC,C,CA0CvC;;;AAEA,MAAMG,kBAAkB,GAAGC,QAAQ,KAAK,EAAL,CAAnC;;AAIA,MAAMC,eAAe,GAAGlB,wBAAwB,CAAC;AAC7Cc,EAAAA,UAAU,EAAET;AADiC,CAAD,CAAhD;AAKA,eAAeN,OAAO,CAACmB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CR,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport {createStructuredSelector} from \"reselect\";\r\n\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.comp\";\r\nimport CollectionPage from \"../collection/collection.comp\";\r\nimport {fetchCollectionsStartAsync} from \"../../redux/shop/shop.actions\";\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\r\nimport {selectIsFetching} from \"../../redux/shop/shop.selectors\";\r\n\r\nimport './shop.styles.scss';\r\n// import * as PropTypes from \"prop-types\";\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n\r\n    // unsubscribeFromSnapShot = null;\r\n\r\n    componentDidMount() {\r\n       fetchCollectionsStartAsync();\r\n\r\n        // const {updateCollections} = this.props;\r\n        // const collectionRef = firestore.collection('collections');\r\n        //\r\n        // collectionRef.get().then(response =>{\r\n        //     const collectionMap = convertCollectionsSnapShotToMap(response);\r\n        //     updateCollections(collectionMap);\r\n        //     this.setState({loading: false});\r\n        // })\r\n\r\n\r\n        // this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapShot => {\r\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({loading: false});\r\n        // });\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     this.unsubscribeFromSnapShot();\r\n    // }\r\n\r\n    render() {\r\n        let {match} = this.props;\r\n        let {isFetching} = this.props;\r\n        return (\r\n            <div className='shop-page'>\r\n                <Route exact path={`${match.path}`} render={(props =>\r\n                    <CollectionsOverviewWithSpinner isLoading={isFetching} {...props}/>)}/>\r\n                <Route exact path={`${match.path}/:collectionId`} render={props =>\r\n                <CollectionPageWithSpinner isLoading={isFetching} {...props}/>}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ShopPage.propTypes = {match: PropTypes.any};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    \r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isFetching: selectIsFetching\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}