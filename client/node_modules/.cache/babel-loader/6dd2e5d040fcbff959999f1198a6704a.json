{"ast":null,"code":"import _toConsumableArray from \"E:\\\\react-commerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { formatTime } from './helpers';\nimport diffLogger from './diff';\n/**\n * Get log level string based on supplied params\n *\n * @param {string | function | object} level - console[level]\n * @param {object} action - selected action\n * @param {array} payload - selected payload\n * @param {string} type - log entry type\n *\n * @returns {string} level\n */\n\nfunction getLogLevel(level, action, payload, type) {\n  switch (typeof level) {\n    case 'object':\n      return typeof level[type] === 'function' ? level[type].apply(level, _toConsumableArray(payload)) : level[type];\n\n    case 'function':\n      return level(action);\n\n    default:\n      return level;\n  }\n}\n\nfunction defaultTitleFormatter(options) {\n  var timestamp = options.timestamp,\n      duration = options.duration;\n  return function (action, time, took) {\n    var parts = ['action'];\n    parts.push(\"%c\".concat(String(action.type)));\n    if (timestamp) parts.push(\"%c@ \".concat(time));\n    if (duration) parts.push(\"%c(in \".concat(took.toFixed(2), \" ms)\"));\n    return parts.join(' ');\n  };\n}\n\nfunction printBuffer(buffer, options) {\n  var logger = options.logger,\n      actionTransformer = options.actionTransformer,\n      _options$titleFormatt = options.titleFormatter,\n      titleFormatter = _options$titleFormatt === void 0 ? defaultTitleFormatter(options) : _options$titleFormatt,\n      collapsed = options.collapsed,\n      colors = options.colors,\n      level = options.level,\n      diff = options.diff;\n  var isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\n  buffer.forEach(function (logEntry, key) {\n    var started = logEntry.started,\n        startedTime = logEntry.startedTime,\n        action = logEntry.action,\n        prevState = logEntry.prevState,\n        error = logEntry.error;\n    var took = logEntry.took,\n        nextState = logEntry.nextState;\n    var nextEntry = buffer[key + 1];\n\n    if (nextEntry) {\n      nextState = nextEntry.prevState;\n      took = nextEntry.started - started;\n    } // Message\n\n\n    var formattedAction = actionTransformer(action);\n    var isCollapsed = typeof collapsed === 'function' ? collapsed(function () {\n      return nextState;\n    }, action, logEntry) : collapsed;\n    var formattedTime = formatTime(startedTime);\n    var titleCSS = colors.title ? \"color: \".concat(colors.title(formattedAction), \";\") : '';\n    var headerCSS = ['color: gray; font-weight: lighter;'];\n    headerCSS.push(titleCSS);\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\n    var title = titleFormatter(formattedAction, formattedTime, took); // Render\n\n    try {\n      if (isCollapsed) {\n        if (colors.title && isUsingDefaultFormatter) {\n          logger.groupCollapsed.apply(logger, [\"%c \".concat(title)].concat(headerCSS));\n        } else logger.groupCollapsed(title);\n      } else if (colors.title && isUsingDefaultFormatter) {\n        logger.group.apply(logger, [\"%c \".concat(title)].concat(headerCSS));\n      } else {\n        logger.group(title);\n      }\n    } catch (e) {\n      logger.log(title);\n    }\n\n    var prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\n    var actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\n    var errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\n    var nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\n\n    if (prevStateLevel) {\n      if (colors.prevState) {\n        var styles = \"color: \".concat(colors.prevState(prevState), \"; font-weight: bold\");\n        logger[prevStateLevel]('%c prev state', styles, prevState);\n      } else logger[prevStateLevel]('prev state', prevState);\n    }\n\n    if (actionLevel) {\n      if (colors.action) {\n        var _styles = \"color: \".concat(colors.action(formattedAction), \"; font-weight: bold\");\n\n        logger[actionLevel]('%c action    ', _styles, formattedAction);\n      } else logger[actionLevel]('action    ', formattedAction);\n    }\n\n    if (error && errorLevel) {\n      if (colors.error) {\n        var _styles2 = \"color: \".concat(colors.error(error, prevState), \"; font-weight: bold;\");\n\n        logger[errorLevel]('%c error     ', _styles2, error);\n      } else logger[errorLevel]('error     ', error);\n    }\n\n    if (nextStateLevel) {\n      if (colors.nextState) {\n        var _styles3 = \"color: \".concat(colors.nextState(nextState), \"; font-weight: bold\");\n\n        logger[nextStateLevel]('%c next state', _styles3, nextState);\n      } else logger[nextStateLevel]('next state', nextState);\n    }\n\n    if (diff) {\n      diffLogger(prevState, nextState, logger, isCollapsed);\n    }\n\n    try {\n      logger.groupEnd();\n    } catch (e) {\n      logger.log('—— log end ——');\n    }\n  });\n}\n\nexport default printBuffer;","map":{"version":3,"sources":["E:/react-commerce/client/node_modules/redux-logger/src/core.js"],"names":["formatTime","diffLogger","getLogLevel","level","action","payload","type","defaultTitleFormatter","options","timestamp","duration","time","took","parts","push","String","toFixed","join","printBuffer","buffer","logger","actionTransformer","titleFormatter","collapsed","colors","diff","isUsingDefaultFormatter","forEach","logEntry","key","started","startedTime","prevState","error","nextState","nextEntry","formattedAction","isCollapsed","formattedTime","titleCSS","title","headerCSS","groupCollapsed","group","e","log","prevStateLevel","actionLevel","errorLevel","nextStateLevel","styles","groupEnd"],"mappings":";AAAA,SAASA,UAAT,QAA2B,WAA3B;AACA,OAAOC,UAAP,MAAuB,QAAvB;AAEA;;;;;;;;;;;AAUA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,IAA7C,EAAmD;AACjD,UAAQ,OAAOH,KAAf;AACE,SAAK,QAAL;AACE,aAAO,OAAOA,KAAK,CAACG,IAAD,CAAZ,KAAuB,UAAvB,GAAoCH,KAAK,CAACG,IAAD,CAAL,OAAAH,KAAK,qBAAUE,OAAV,EAAzC,GAA8DF,KAAK,CAACG,IAAD,CAA1E;;AACF,SAAK,UAAL;AACE,aAAOH,KAAK,CAACC,MAAD,CAAZ;;AACF;AACE,aAAOD,KAAP;AANJ;AAQD;;AAED,SAASI,qBAAT,CAA+BC,OAA/B,EAAwC;AAAA,MAC9BC,SAD8B,GACND,OADM,CAC9BC,SAD8B;AAAA,MACnBC,QADmB,GACNF,OADM,CACnBE,QADmB;AAGtC,SAAO,UAACN,MAAD,EAASO,IAAT,EAAeC,IAAf,EAAwB;AAC7B,QAAMC,KAAK,GAAG,CAAC,QAAD,CAAd;AAEAA,IAAAA,KAAK,CAACC,IAAN,aAAgBC,MAAM,CAACX,MAAM,CAACE,IAAR,CAAtB;AACA,QAAIG,SAAJ,EAAeI,KAAK,CAACC,IAAN,eAAkBH,IAAlB;AACf,QAAID,QAAJ,EAAcG,KAAK,CAACC,IAAN,iBAAoBF,IAAI,CAACI,OAAL,CAAa,CAAb,CAApB;AAEd,WAAOH,KAAK,CAACI,IAAN,CAAW,GAAX,CAAP;AACD,GARD;AASD;;AAED,SAASC,WAAT,CAAqBC,MAArB,EAA6BX,OAA7B,EAAsC;AAAA,MAElCY,MAFkC,GAShCZ,OATgC,CAElCY,MAFkC;AAAA,MAGlCC,iBAHkC,GAShCb,OATgC,CAGlCa,iBAHkC;AAAA,8BAShCb,OATgC,CAIlCc,cAJkC;AAAA,MAIlCA,cAJkC,sCAIjBf,qBAAqB,CAACC,OAAD,CAJJ;AAAA,MAKlCe,SALkC,GAShCf,OATgC,CAKlCe,SALkC;AAAA,MAMlCC,MANkC,GAShChB,OATgC,CAMlCgB,MANkC;AAAA,MAOlCrB,KAPkC,GAShCK,OATgC,CAOlCL,KAPkC;AAAA,MAQlCsB,IARkC,GAShCjB,OATgC,CAQlCiB,IARkC;AAWpC,MAAMC,uBAAuB,GAAG,OAAOlB,OAAO,CAACc,cAAf,KAAkC,WAAlE;AAEAH,EAAAA,MAAM,CAACQ,OAAP,CAAe,UAACC,QAAD,EAAWC,GAAX,EAAmB;AAAA,QACxBC,OADwB,GAC2BF,QAD3B,CACxBE,OADwB;AAAA,QACfC,WADe,GAC2BH,QAD3B,CACfG,WADe;AAAA,QACF3B,MADE,GAC2BwB,QAD3B,CACFxB,MADE;AAAA,QACM4B,SADN,GAC2BJ,QAD3B,CACMI,SADN;AAAA,QACiBC,KADjB,GAC2BL,QAD3B,CACiBK,KADjB;AAAA,QAE1BrB,IAF0B,GAENgB,QAFM,CAE1BhB,IAF0B;AAAA,QAEpBsB,SAFoB,GAENN,QAFM,CAEpBM,SAFoB;AAGhC,QAAMC,SAAS,GAAGhB,MAAM,CAACU,GAAG,GAAG,CAAP,CAAxB;;AAEA,QAAIM,SAAJ,EAAe;AACbD,MAAAA,SAAS,GAAGC,SAAS,CAACH,SAAtB;AACApB,MAAAA,IAAI,GAAGuB,SAAS,CAACL,OAAV,GAAoBA,OAA3B;AACD,KAR+B,CAUhC;;;AACA,QAAMM,eAAe,GAAGf,iBAAiB,CAACjB,MAAD,CAAzC;AACA,QAAMiC,WAAW,GAAG,OAAOd,SAAP,KAAqB,UAArB,GAChBA,SAAS,CAAC;AAAA,aAAMW,SAAN;AAAA,KAAD,EAAkB9B,MAAlB,EAA0BwB,QAA1B,CADO,GAEhBL,SAFJ;AAIA,QAAMe,aAAa,GAAGtC,UAAU,CAAC+B,WAAD,CAAhC;AACA,QAAMQ,QAAQ,GAAGf,MAAM,CAACgB,KAAP,oBAAyBhB,MAAM,CAACgB,KAAP,CAAaJ,eAAb,CAAzB,SAA4D,EAA7E;AACA,QAAMK,SAAS,GAAG,CAAC,oCAAD,CAAlB;AACAA,IAAAA,SAAS,CAAC3B,IAAV,CAAeyB,QAAf;AACA,QAAI/B,OAAO,CAACC,SAAZ,EAAuBgC,SAAS,CAAC3B,IAAV,CAAe,oCAAf;AACvB,QAAIN,OAAO,CAACE,QAAZ,EAAsB+B,SAAS,CAAC3B,IAAV,CAAe,oCAAf;AACtB,QAAM0B,KAAK,GAAGlB,cAAc,CAACc,eAAD,EAAkBE,aAAlB,EAAiC1B,IAAjC,CAA5B,CAtBgC,CAwBhC;;AACA,QAAI;AACF,UAAIyB,WAAJ,EAAiB;AACf,YAAIb,MAAM,CAACgB,KAAP,IAAgBd,uBAApB,EAA6C;AAC3CN,UAAAA,MAAM,CAACsB,cAAP,OAAAtB,MAAM,gBAAsBoB,KAAtB,UAAkCC,SAAlC,EAAN;AACD,SAFD,MAEOrB,MAAM,CAACsB,cAAP,CAAsBF,KAAtB;AACR,OAJD,MAIO,IAAIhB,MAAM,CAACgB,KAAP,IAAgBd,uBAApB,EAA6C;AAClDN,QAAAA,MAAM,CAACuB,KAAP,OAAAvB,MAAM,gBAAaoB,KAAb,UAAyBC,SAAzB,EAAN;AACD,OAFM,MAEA;AACLrB,QAAAA,MAAM,CAACuB,KAAP,CAAaH,KAAb;AACD;AACF,KAVD,CAUE,OAAOI,CAAP,EAAU;AACVxB,MAAAA,MAAM,CAACyB,GAAP,CAAWL,KAAX;AACD;;AAED,QAAMM,cAAc,GAAG5C,WAAW,CAACC,KAAD,EAAQiC,eAAR,EAAyB,CAACJ,SAAD,CAAzB,EAAsC,WAAtC,CAAlC;AACA,QAAMe,WAAW,GAAG7C,WAAW,CAACC,KAAD,EAAQiC,eAAR,EAAyB,CAACA,eAAD,CAAzB,EAA4C,QAA5C,CAA/B;AACA,QAAMY,UAAU,GAAG9C,WAAW,CAACC,KAAD,EAAQiC,eAAR,EAAyB,CAACH,KAAD,EAAQD,SAAR,CAAzB,EAA6C,OAA7C,CAA9B;AACA,QAAMiB,cAAc,GAAG/C,WAAW,CAACC,KAAD,EAAQiC,eAAR,EAAyB,CAACF,SAAD,CAAzB,EAAsC,WAAtC,CAAlC;;AAEA,QAAIY,cAAJ,EAAoB;AAClB,UAAItB,MAAM,CAACQ,SAAX,EAAsB;AACpB,YAAMkB,MAAM,oBAAa1B,MAAM,CAACQ,SAAP,CAAiBA,SAAjB,CAAb,wBAAZ;AAEAZ,QAAAA,MAAM,CAAC0B,cAAD,CAAN,CAAuB,eAAvB,EAAwCI,MAAxC,EAAgDlB,SAAhD;AACD,OAJD,MAIOZ,MAAM,CAAC0B,cAAD,CAAN,CAAuB,YAAvB,EAAqCd,SAArC;AACR;;AAED,QAAIe,WAAJ,EAAiB;AACf,UAAIvB,MAAM,CAACpB,MAAX,EAAmB;AACjB,YAAM8C,OAAM,oBAAa1B,MAAM,CAACpB,MAAP,CAAcgC,eAAd,CAAb,wBAAZ;;AAEAhB,QAAAA,MAAM,CAAC2B,WAAD,CAAN,CAAoB,eAApB,EAAqCG,OAArC,EAA6Cd,eAA7C;AACD,OAJD,MAIOhB,MAAM,CAAC2B,WAAD,CAAN,CAAoB,YAApB,EAAkCX,eAAlC;AACR;;AAED,QAAIH,KAAK,IAAIe,UAAb,EAAyB;AACvB,UAAIxB,MAAM,CAACS,KAAX,EAAkB;AAChB,YAAMiB,QAAM,oBAAa1B,MAAM,CAACS,KAAP,CAAaA,KAAb,EAAoBD,SAApB,CAAb,yBAAZ;;AAEAZ,QAAAA,MAAM,CAAC4B,UAAD,CAAN,CAAmB,eAAnB,EAAoCE,QAApC,EAA4CjB,KAA5C;AACD,OAJD,MAIOb,MAAM,CAAC4B,UAAD,CAAN,CAAmB,YAAnB,EAAiCf,KAAjC;AACR;;AAED,QAAIgB,cAAJ,EAAoB;AAClB,UAAIzB,MAAM,CAACU,SAAX,EAAsB;AACpB,YAAMgB,QAAM,oBAAa1B,MAAM,CAACU,SAAP,CAAiBA,SAAjB,CAAb,wBAAZ;;AAEAd,QAAAA,MAAM,CAAC6B,cAAD,CAAN,CAAuB,eAAvB,EAAwCC,QAAxC,EAAgDhB,SAAhD;AACD,OAJD,MAIOd,MAAM,CAAC6B,cAAD,CAAN,CAAuB,YAAvB,EAAqCf,SAArC;AACR;;AAED,QAAIT,IAAJ,EAAU;AACRxB,MAAAA,UAAU,CAAC+B,SAAD,EAAYE,SAAZ,EAAuBd,MAAvB,EAA+BiB,WAA/B,CAAV;AACD;;AAED,QAAI;AACFjB,MAAAA,MAAM,CAAC+B,QAAP;AACD,KAFD,CAEE,OAAOP,CAAP,EAAU;AACVxB,MAAAA,MAAM,CAACyB,GAAP,CAAW,eAAX;AACD;AACF,GArFD;AAsFD;;AAED,eAAe3B,WAAf","sourcesContent":["import { formatTime } from './helpers';\nimport diffLogger from './diff';\n\n/**\n * Get log level string based on supplied params\n *\n * @param {string | function | object} level - console[level]\n * @param {object} action - selected action\n * @param {array} payload - selected payload\n * @param {string} type - log entry type\n *\n * @returns {string} level\n */\nfunction getLogLevel(level, action, payload, type) {\n  switch (typeof level) {\n    case 'object':\n      return typeof level[type] === 'function' ? level[type](...payload) : level[type];\n    case 'function':\n      return level(action);\n    default:\n      return level;\n  }\n}\n\nfunction defaultTitleFormatter(options) {\n  const { timestamp, duration } = options;\n\n  return (action, time, took) => {\n    const parts = ['action'];\n\n    parts.push(`%c${String(action.type)}`);\n    if (timestamp) parts.push(`%c@ ${time}`);\n    if (duration) parts.push(`%c(in ${took.toFixed(2)} ms)`);\n\n    return parts.join(' ');\n  };\n}\n\nfunction printBuffer(buffer, options) {\n  const {\n    logger,\n    actionTransformer,\n    titleFormatter = defaultTitleFormatter(options),\n    collapsed,\n    colors,\n    level,\n    diff,\n  } = options;\n\n  const isUsingDefaultFormatter = typeof options.titleFormatter === 'undefined';\n\n  buffer.forEach((logEntry, key) => {\n    const { started, startedTime, action, prevState, error } = logEntry;\n    let { took, nextState } = logEntry;\n    const nextEntry = buffer[key + 1];\n\n    if (nextEntry) {\n      nextState = nextEntry.prevState;\n      took = nextEntry.started - started;\n    }\n\n    // Message\n    const formattedAction = actionTransformer(action);\n    const isCollapsed = typeof collapsed === 'function'\n      ? collapsed(() => nextState, action, logEntry)\n      : collapsed;\n\n    const formattedTime = formatTime(startedTime);\n    const titleCSS = colors.title ? `color: ${colors.title(formattedAction)};` : '';\n    const headerCSS = ['color: gray; font-weight: lighter;'];\n    headerCSS.push(titleCSS);\n    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');\n    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');\n    const title = titleFormatter(formattedAction, formattedTime, took);\n\n    // Render\n    try {\n      if (isCollapsed) {\n        if (colors.title && isUsingDefaultFormatter) {\n          logger.groupCollapsed(`%c ${title}`, ...headerCSS);\n        } else logger.groupCollapsed(title);\n      } else if (colors.title && isUsingDefaultFormatter) {\n        logger.group(`%c ${title}`, ...headerCSS);\n      } else {\n        logger.group(title);\n      }\n    } catch (e) {\n      logger.log(title);\n    }\n\n    const prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');\n    const actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');\n    const errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');\n    const nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');\n\n    if (prevStateLevel) {\n      if (colors.prevState) {\n        const styles = `color: ${colors.prevState(prevState)}; font-weight: bold`;\n\n        logger[prevStateLevel]('%c prev state', styles, prevState);\n      } else logger[prevStateLevel]('prev state', prevState);\n    }\n\n    if (actionLevel) {\n      if (colors.action) {\n        const styles = `color: ${colors.action(formattedAction)}; font-weight: bold`;\n\n        logger[actionLevel]('%c action    ', styles, formattedAction);\n      } else logger[actionLevel]('action    ', formattedAction);\n    }\n\n    if (error && errorLevel) {\n      if (colors.error) {\n        const styles = `color: ${colors.error(error, prevState)}; font-weight: bold;`;\n\n        logger[errorLevel]('%c error     ', styles, error);\n      } else logger[errorLevel]('error     ', error);\n    }\n\n    if (nextStateLevel) {\n      if (colors.nextState) {\n        const styles = `color: ${colors.nextState(nextState)}; font-weight: bold`;\n\n        logger[nextStateLevel]('%c next state', styles, nextState);\n      } else logger[nextStateLevel]('next state', nextState);\n    }\n\n    if (diff) {\n      diffLogger(prevState, nextState, logger, isCollapsed);\n    }\n\n    try {\n      logger.groupEnd();\n    } catch (e) {\n      logger.log('—— log end ——');\n    }\n  });\n}\n\nexport default printBuffer;\n"]},"metadata":{},"sourceType":"module"}