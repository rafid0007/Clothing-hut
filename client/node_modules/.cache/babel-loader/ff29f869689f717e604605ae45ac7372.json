{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-commerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.comp\";\nimport CollectionPage from \"../collection/collection.comp\";\nimport { firestore, convertCollectionsSnapShotToMap } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport './shop.styles.scss'; // import * as PropTypes from \"prop-types\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapShot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    collectionRef.get().then(response => {\n      const collectionMap = convertCollectionsSnapShotToMap(response);\n      updateCollections(collectionMap);\n      this.setState({\n        loading: false\n      });\n    }); // this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapShot => {\n    //     const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({loading: false});\n    // });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapShot();\n  }\n\n  render() {\n    let {\n      match\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: this.state.loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: this.state.loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // ShopPage.propTypes = {match: PropTypes.any};\n\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collections => dispatch(updateCollections(collections))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["E:/react-commerce/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapShotToMap","updateCollections","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapShot","componentDidMount","props","collectionRef","collection","get","then","response","collectionMap","setState","componentWillUnmount","render","match","path","mapDispatchToProps","dispatch","collections"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,mBAAP,MAAgC,iEAAhC;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAO,oBAAP,C,CACA;;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACL,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGF,WAAW,CAACJ,cAAD,CAA7C;;AAEA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAD2B;AAAA,SAKnCC,uBALmC,GAKT,IALS;AAAA;;AAOnCC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAACT,MAAAA;AAAD,QAAsB,KAAKU,KAAjC;AACA,UAAMC,aAAa,GAAGb,SAAS,CAACc,UAAV,CAAqB,aAArB,CAAtB;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAG;AAChC,YAAMC,aAAa,GAAGjB,+BAA+B,CAACgB,QAAD,CAArD;AACAf,MAAAA,iBAAiB,CAACgB,aAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAACV,QAAAA,OAAO,EAAE;AAAV,OAAd;AACH,KAJD,EAJgB,CAWhB;AACA;AACA;AACA;AACA;AACH;;AAEDW,EAAAA,oBAAoB,GAAG;AACnB,SAAKV,uBAAL;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACL,QAAI;AAACC,MAAAA;AAAD,QAAU,KAAKV,KAAnB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEU,KAAK,CAACC,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGX,KAAK,iBAC9C,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWC;AAAtD,SAAmEG,KAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEU,KAAK,CAACC,IAAK,gBAAjC;AAAkD,MAAA,MAAM,EAAEX,KAAK,iBAC/D,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWC;AAAjD,SAA8DG,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAQH;;AAvCkC,C,CA0CvC;;;AAEA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpCvB,EAAAA,iBAAiB,EAAEwB,WAAW,IAAID,QAAQ,CAACvB,iBAAiB,CAACwB,WAAD,CAAlB;AADN,CAAL,CAAnC;;AAKA,eAAe7B,OAAO,CAAC,IAAD,EAAO2B,kBAAP,CAAP,CAAkClB,QAAlC,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.comp\";\r\nimport CollectionPage from \"../collection/collection.comp\";\r\nimport {firestore, convertCollectionsSnapShotToMap} from \"../../firebase/firebase.utils\";\r\nimport {updateCollections} from \"../../redux/shop/shop.actions\";\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\r\n\r\nimport './shop.styles.scss';\r\n// import * as PropTypes from \"prop-types\";\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n    state = {\r\n        loading: true\r\n    };\r\n\r\n    unsubscribeFromSnapShot = null;\r\n\r\n    componentDidMount() {\r\n        const {updateCollections} = this.props;\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        collectionRef.get().then(response =>{\r\n            const collectionMap = convertCollectionsSnapShotToMap(response);\r\n            updateCollections(collectionMap);\r\n            this.setState({loading: false});\r\n        })\r\n\r\n\r\n        // this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapShot => {\r\n        //     const collectionsMap = convertCollectionsSnapShotToMap(snapShot);\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({loading: false});\r\n        // });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeFromSnapShot();\r\n    }\r\n\r\n    render() {\r\n        let {match} = this.props;\r\n        return (\r\n            <div className='shop-page'>\r\n                <Route exact path={`${match.path}`} render={(props =>\r\n                    <CollectionsOverviewWithSpinner isLoading={this.state.loading} {...props}/>)}/>\r\n                <Route exact path={`${match.path}/:collectionId`} render={props =>\r\n                <CollectionPageWithSpinner isLoading={this.state.loading} {...props}/>}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ShopPage.propTypes = {match: PropTypes.any};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections: collections => dispatch(updateCollections(collections))\r\n});\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}